package cli

import (
	"github.com/svenfuchs/jq"

	"io/ioutil"
	"net/http"
	"strings"
)

const (
	pingURL  = "http://localhost:8081/service/metrics/ping"
	assetURL = "http://localhost:8081/service/rest/v1/search/assets?repository=maven-releases"
)

func continuationToken(token string) string {
	url := assetURL
	if !(token == "null") {
		url = assetURL + "&continuationToken=" + token
	}

	var tokenWithoutQuotes string
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Accept", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	//so
	if resp.StatusCode == http.StatusOK {
		bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			//
		}
		// bodyString := string(bodyBytes)
		// log.Info(bodyString)
		op, err := jq.Parse(".continuationToken")
		if err != nil {
			//
		}

		// data := []byte(`{"items":[{"hello":"world"},{"hello","bye"}],"hi":"bye"}`) // sample input
		value, err := op.Apply(bodyBytes) // value == '"world"'
		if err != nil {
			//
		}
		tokenWithoutQuotes = strings.Trim(string(value), "\"")

	}
	return tokenWithoutQuotes
}

var tokenMap = []string{}

func continuationTokenRecursion(s string) []string {
	token := continuationToken(s)
	tokenMap = append(tokenMap, token)
	if token == "null" {
		return tokenMap
	}
	return continuationTokenRecursion(token)
}
