package cli

import (
	log "github.com/sirupsen/logrus"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
)

func pong() bool {
	pongAvailable := false

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", "http://localhost:8081/service/metrics/ping", nil)
	if err != nil {
		// handle err
	}
	req.SetBasicAuth("admin", "admin123")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	//so
	if resp.StatusCode == http.StatusOK {
		bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatal(err)
		}
		bodyString := string(bodyBytes)

		if bodyString == "pong\n" {
			pongAvailable = true
		}
	}
	return pongAvailable
}

func shutdown() {
	cmd := exec.Command("bash", "-c", "docker stop nexus && docker rm nexus")
	stdoutStderr, err := cmd.CombinedOutput()
	if err != nil {
		log.Fatal(err, string(stdoutStderr))
	}
}

func submitArtifact(f string) {
	cmd := exec.Command("bash", "-c", "curl -u admin:admin123 -X POST \"http://localhost:8081/service/rest/v1/components?repository=maven-releases\" -H  \"accept: application/json\" -H  \"Content-Type: multipart/form-data\" -F \"maven2.asset1=@file"+f+".pom\" -F \"maven2.asset1.extension=pom\" -F \"maven2.asset2=@file"+f+".jar\" -F \"maven2.asset2.extension=jar\"")
	stdoutStderr, err := cmd.CombinedOutput()
	if err != nil {
		log.Fatal(err, string(stdoutStderr))
	}
}

func createPOM(f string) {
	createArtifact("file"+f+".pom", "<project>\n<modelVersion>4.0.0</modelVersion>\n<groupId>file"+f+"</groupId>\n<artifactId>file"+f+"</artifactId>\n<version>1.0.0</version>\n</project>")
}

func createJAR(f string) {
	createArtifact("file"+f+".jar", "some-content")
}

func createArtifactsAndSubmit(f string) {
	createPOM(f)
	createJAR(f)
	submitArtifact(f)
}

func cleanupFiles(re string) {
	files, err := filepath.Glob(re)
	if err != nil {
		log.Fatal(err)
	}
	for _, f := range files {
		if err := os.Remove(f); err != nil {
			log.Fatal(err)
		}
	}
}

func downloadTestArtifact(repository string, f string, version string, extension string) {
	req, err := http.NewRequest("GET", "http://localhost:8081/service/rest/v1/search/assets/download?repository="+repository+"&name="+f+"&version="+version+"&maven.extension="+extension+"", nil)

	if err != nil {
		log.Fatal(err)
	}
	req.SetBasicAuth("admin", "admin123")
	req.Header.Set("Accept", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	createArtifact("downloaded-"+f+"-"+version+"."+extension, string(body))
}
