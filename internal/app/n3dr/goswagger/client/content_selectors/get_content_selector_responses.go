// Code generated by go-swagger; DO NOT EDIT.

package content_selectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/030/n3dr/internal/app/n3dr/goswagger/models"
)

// GetContentSelectorReader is a Reader for the GetContentSelector structure.
type GetContentSelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentSelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentSelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetContentSelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetContentSelectorOK creates a GetContentSelectorOK with default headers values
func NewGetContentSelectorOK() *GetContentSelectorOK {
	return &GetContentSelectorOK{}
}

/* GetContentSelectorOK describes a response with status code 200, with default header values.

successful operation
*/
type GetContentSelectorOK struct {
	Payload *models.ContentSelectorAPIResponse
}

func (o *GetContentSelectorOK) Error() string {
	return fmt.Sprintf("[GET /v1/security/content-selectors/{name}][%d] getContentSelectorOK  %+v", 200, o.Payload)
}
func (o *GetContentSelectorOK) GetPayload() *models.ContentSelectorAPIResponse {
	return o.Payload
}

func (o *GetContentSelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContentSelectorAPIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentSelectorForbidden creates a GetContentSelectorForbidden with default headers values
func NewGetContentSelectorForbidden() *GetContentSelectorForbidden {
	return &GetContentSelectorForbidden{}
}

/* GetContentSelectorForbidden describes a response with status code 403, with default header values.

Insufficient permissions to read the content selector
*/
type GetContentSelectorForbidden struct {
}

func (o *GetContentSelectorForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/security/content-selectors/{name}][%d] getContentSelectorForbidden ", 403)
}

func (o *GetContentSelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
