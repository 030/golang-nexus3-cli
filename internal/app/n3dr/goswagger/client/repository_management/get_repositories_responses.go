// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/030/n3dr/internal/app/n3dr/goswagger/models"
)

// GetRepositoriesReader is a Reader for the GetRepositories structure.
type GetRepositoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesOK creates a GetRepositoriesOK with default headers values
func NewGetRepositoriesOK() *GetRepositoriesOK {
	return &GetRepositoriesOK{}
}

/* GetRepositoriesOK describes a response with status code 200, with default header values.

Repositories list returned
*/
type GetRepositoriesOK struct {
	Payload []*models.AbstractAPIRepository
}

func (o *GetRepositoriesOK) Error() string {
	return fmt.Sprintf("[GET /v1/repositorySettings][%d] getRepositoriesOK  %+v", 200, o.Payload)
}
func (o *GetRepositoriesOK) GetPayload() []*models.AbstractAPIRepository {
	return o.Payload
}

func (o *GetRepositoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesUnauthorized creates a GetRepositoriesUnauthorized with default headers values
func NewGetRepositoriesUnauthorized() *GetRepositoriesUnauthorized {
	return &GetRepositoriesUnauthorized{}
}

/* GetRepositoriesUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type GetRepositoriesUnauthorized struct {
}

func (o *GetRepositoriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/repositorySettings][%d] getRepositoriesUnauthorized ", 401)
}

func (o *GetRepositoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesForbidden creates a GetRepositoriesForbidden with default headers values
func NewGetRepositoriesForbidden() *GetRepositoriesForbidden {
	return &GetRepositoriesForbidden{}
}

/* GetRepositoriesForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type GetRepositoriesForbidden struct {
}

func (o *GetRepositoriesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/repositorySettings][%d] getRepositoriesForbidden ", 403)
}

func (o *GetRepositoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
