// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository4Reader is a Reader for the UpdateRepository4 structure.
type UpdateRepository4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository4NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateRepository4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRepository4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRepository4NoContent creates a UpdateRepository4NoContent with default headers values
func NewUpdateRepository4NoContent() *UpdateRepository4NoContent {
	return &UpdateRepository4NoContent{}
}

/* UpdateRepository4NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository4NoContent struct {
}

func (o *UpdateRepository4NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] updateRepository4NoContent ", 204)
}

func (o *UpdateRepository4NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository4Unauthorized creates a UpdateRepository4Unauthorized with default headers values
func NewUpdateRepository4Unauthorized() *UpdateRepository4Unauthorized {
	return &UpdateRepository4Unauthorized{}
}

/* UpdateRepository4Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository4Unauthorized struct {
}

func (o *UpdateRepository4Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] updateRepository4Unauthorized ", 401)
}

func (o *UpdateRepository4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository4Forbidden creates a UpdateRepository4Forbidden with default headers values
func NewUpdateRepository4Forbidden() *UpdateRepository4Forbidden {
	return &UpdateRepository4Forbidden{}
}

/* UpdateRepository4Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository4Forbidden struct {
}

func (o *UpdateRepository4Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] updateRepository4Forbidden ", 403)
}

func (o *UpdateRepository4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository4NotFound creates a UpdateRepository4NotFound with default headers values
func NewUpdateRepository4NotFound() *UpdateRepository4NotFound {
	return &UpdateRepository4NotFound{}
}

/* UpdateRepository4NotFound describes a response with status code 404, with default header values.

Repository not found
*/
type UpdateRepository4NotFound struct {
}

func (o *UpdateRepository4NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] updateRepository4NotFound ", 404)
}

func (o *UpdateRepository4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
