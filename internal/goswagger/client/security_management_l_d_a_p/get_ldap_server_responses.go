// Code generated by go-swagger; DO NOT EDIT.

package security_management_l_d_a_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetLdapServerReader is a Reader for the GetLdapServer structure.
type GetLdapServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLdapServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLdapServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLdapServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLdapServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLdapServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLdapServerOK creates a GetLdapServerOK with default headers values
func NewGetLdapServerOK() *GetLdapServerOK {
	return &GetLdapServerOK{}
}

/* GetLdapServerOK describes a response with status code 200, with default header values.

LDAP server returned
*/
type GetLdapServerOK struct {
}

func (o *GetLdapServerOK) Error() string {
	return fmt.Sprintf("[GET /v1/security/ldap/{name}][%d] getLdapServerOK ", 200)
}

func (o *GetLdapServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLdapServerUnauthorized creates a GetLdapServerUnauthorized with default headers values
func NewGetLdapServerUnauthorized() *GetLdapServerUnauthorized {
	return &GetLdapServerUnauthorized{}
}

/* GetLdapServerUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type GetLdapServerUnauthorized struct {
}

func (o *GetLdapServerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/security/ldap/{name}][%d] getLdapServerUnauthorized ", 401)
}

func (o *GetLdapServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLdapServerForbidden creates a GetLdapServerForbidden with default headers values
func NewGetLdapServerForbidden() *GetLdapServerForbidden {
	return &GetLdapServerForbidden{}
}

/* GetLdapServerForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type GetLdapServerForbidden struct {
}

func (o *GetLdapServerForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/security/ldap/{name}][%d] getLdapServerForbidden ", 403)
}

func (o *GetLdapServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLdapServerNotFound creates a GetLdapServerNotFound with default headers values
func NewGetLdapServerNotFound() *GetLdapServerNotFound {
	return &GetLdapServerNotFound{}
}

/* GetLdapServerNotFound describes a response with status code 404, with default header values.

LDAP server not found
*/
type GetLdapServerNotFound struct {
}

func (o *GetLdapServerNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/security/ldap/{name}][%d] getLdapServerNotFound ", 404)
}

func (o *GetLdapServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
