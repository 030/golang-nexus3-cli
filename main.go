package main

import (
	"fmt"
	log "github.com/sirupsen/logrus"
	"github.com/svenfuchs/jq"

	"io/ioutil"
	"net/http"
	"strings"
)

func main() {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", "http://localhost:8081/service/rest/v1/search/assets?repository=maven-releases", nil)
	// req, err := http.NewRequest("GET", "http://localhost:8081/service/rest/v1/search?repository=maven-releases", nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Accept", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	// https://stackoverflow.com/a/38673698/2777965
	if resp.StatusCode == http.StatusOK {
		bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatal(err)
		}
		// bodyString := string(bodyBytes)
		// log.Info(bodyString)

		// op, _ := jq.Parse(".continuationToken")
		// value, _ := op.Apply(bodyBytes)
		// fmt.Println(string(value))

		// op2, _ := jq.Parse(".items[].downloadUrl")
		// value2, _ := op2.Apply(bodyBytes)
		// fmt.Println(string(value2))

		// op, err := jq.Parse(".items[0].downloadUrl") // create an Op
		// op, err := jq.Parse(".items[0].assets[].downloadUrl")

		op, err := jq.Parse(".continuationToken")
		if err != nil {
			log.Fatal(err)
		}

		// data := []byte(`{"items":[{"hello":"world"},{"hello","bye"}],"hi":"bye"}`) // sample input
		value, err := op.Apply(bodyBytes) // value == '"world"'
		if err != nil {
			log.Fatal(err)
		}
		tokenWithoutQuotes := strings.Trim(string(value), "\"")
		fmt.Println(tokenWithoutQuotes)

		// for !(continuationToken(tokenWithoutQuotes) == "null") {
		// 	log.Info("cp")
		// 	log.Info(continuationToken(tokenWithoutQuotes))
		// }

		// fact(tokenWithoutQuotes)

	}

}

// func fact(s string) {
// 	if s == "null" {
// 		return
// 	}
// 	token := continuationToken2(s)
// 	fmt.Println(token)
// 	fact(token)
// }
